// <auto-generated />
using System;
using LibraryManagementSystem.DBLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagementSystem.Migrations
{
    [DbContext(typeof(ILibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagementSystem.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 2,
                            Author = "Paulo Coelho",
                            ISBN = "9780062315007",
                            IsAvailable = true,
                            Stock = 3,
                            Title = "The Alchemist"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Harper Lee",
                            ISBN = "9780061120084",
                            IsAvailable = true,
                            Stock = 4,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "J.D. Salinger",
                            ISBN = "9780316769488",
                            IsAvailable = true,
                            Stock = 4,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Yuval Noah Harari",
                            ISBN = "9780062316097",
                            IsAvailable = true,
                            Stock = 6,
                            Title = "Sapiens: A Brief History of Humankind"
                        },
                        new
                        {
                            BookId = 6,
                            Author = "F. Scott Fitzgerald",
                            ISBN = "9780743273565",
                            IsAvailable = true,
                            Stock = 3,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            BookId = 7,
                            Author = "Tara Westover",
                            ISBN = "9780399590504",
                            IsAvailable = true,
                            Stock = 5,
                            Title = "Educated"
                        },
                        new
                        {
                            BookId = 8,
                            Author = "Daniel Kahneman",
                            ISBN = "9780374533557",
                            IsAvailable = true,
                            Stock = 4,
                            Title = "Thinking, Fast and Slow"
                        },
                        new
                        {
                            BookId = 9,
                            Author = "Eckhart Tolle",
                            ISBN = "9781577314806",
                            IsAvailable = true,
                            Stock = 2,
                            Title = "The Power of Now"
                        },
                        new
                        {
                            BookId = 10,
                            Author = "J.R.R. Tolkien",
                            ISBN = "9780547928227",
                            IsAvailable = true,
                            Stock = 7,
                            Title = "The Hobbit"
                        });
                });

            modelBuilder.Entity("LibraryManagementSystem.Entities.BorrowRecord", b =>
                {
                    b.Property<int>("BorrowRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowRecordId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BorrowRecordId");

                    b.HasIndex("BookId");

                    b.HasIndex("MemberId");

                    b.ToTable("BorrowRecords");
                });

            modelBuilder.Entity("LibraryManagementSystem.Entities.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("LibraryManagementSystem.Entities.BorrowRecord", b =>
                {
                    b.HasOne("LibraryManagementSystem.Entities.Book", "Book")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementSystem.Entities.Member", "Member")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryManagementSystem.Entities.Book", b =>
                {
                    b.Navigation("BorrowRecords");
                });

            modelBuilder.Entity("LibraryManagementSystem.Entities.Member", b =>
                {
                    b.Navigation("BorrowRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
